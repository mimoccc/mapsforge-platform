/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.gpxmodule.actions.ui;

import de.fub.agg2graph.gpseval.data.Waypoint;
import de.fub.agg2graph.gpseval.features.AvgAccelerationFeature;
import de.fub.agg2graph.gpseval.features.AvgSpeedFeature;
import de.fub.agg2graph.gpseval.features.MaxNAccelerationFeature;
import de.fub.agg2graph.gpseval.features.MaxNSpeedFeature;
import de.fub.agg2graph.gpseval.features.MeanVelocityFeature;
import de.fub.agg2graph.gpseval.features.TrackLengthFeature;
import de.fub.gpxmodule.xml.gpx.Trkseg;
import de.fub.gpxmodule.xml.gpx.Wpt;
import java.beans.IntrospectionException;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.BeanNode;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

/**
 *
 * @author Serdar
 */
public class StatisticForm extends javax.swing.JPanel implements ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;
    private final ExplorerManager explorerManager = new ExplorerManager();

    /**
     * Creates new form StatisticForm
     */
    public StatisticForm() {
        initComponents();
        propertySheetView1.setDescriptionAreaVisible(false);
    }

    public StatisticForm(Trkseg trkseg) {
        this();
        Statistics statistics = new Statistics(trkseg);
        try {
            BeanNode<Statistics> beanNode = new BeanNode<Statistics>(statistics);
            explorerManager.setRootContext(beanNode);
            explorerManager.setSelectedNodes(new Node[]{beanNode});
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propertySheetView1 = new org.openide.explorer.propertysheet.PropertySheetView();

        setLayout(new java.awt.BorderLayout());
        add(propertySheetView1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.propertysheet.PropertySheetView propertySheetView1;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private static class Statistics {

        private Double totalLength;
        private Double averageVelocity;
        private Double meanVelocity;
        private Double maxVelocity;
        private Double averageAcceleration;
        private Double maxAcceleration;
        private final ArrayList<Waypoint> list;

        public Statistics(Trkseg trkseg) {
            this.list = new ArrayList<Waypoint>(trkseg.getTrkpt().size());
            for (Wpt wpt : trkseg.getTrkpt()) {
                this.list.add(new CustomWaypoint(wpt));
            }
        }

        public double getTotalLength() {
            if (totalLength == null) {
                TrackLengthFeature trackLengthFeature = new TrackLengthFeature();
                for (Waypoint waypoint : this.list) {
                    trackLengthFeature.addWaypoint(waypoint);
                }
                totalLength = trackLengthFeature.getResult();
            }
            return totalLength;
        }

        public int getTotalPointCount() {
            return this.list.size();
        }

        public double getAverageVelocity() {
            if (averageVelocity == null) {
                AvgSpeedFeature avgSpeedFeature = new AvgSpeedFeature();
                for (Waypoint waypoint : this.list) {
                    avgSpeedFeature.addWaypoint(waypoint);
                }
                averageVelocity = avgSpeedFeature.getResult();
            }
            return averageVelocity;
        }

        public double getMeanVelocity() {
            if (meanVelocity == null) {
                MeanVelocityFeature meanVelocityFeature = new MeanVelocityFeature();
                for (Waypoint waypoint : this.list) {
                    meanVelocityFeature.addWaypoint(waypoint);
                }
                meanVelocity = meanVelocityFeature.getResult();
            }
            return meanVelocity;
        }

        public double getMaxVelocity() {
            if (maxVelocity == null) {
                MaxNSpeedFeature maxVelocityFeature = new MaxNSpeedFeature(1);
                for (Waypoint waypoint : this.list) {
                    maxVelocityFeature.addWaypoint(waypoint);
                }
                maxVelocity = maxVelocityFeature.getResult();
            }
            return maxVelocity;
        }

        public double getAverageAcceleration() {
            if (averageAcceleration == null) {
                AvgAccelerationFeature avgAccelerationFeature = new AvgAccelerationFeature();
                for (Waypoint waypoint : this.list) {
                    avgAccelerationFeature.addWaypoint(waypoint);
                }
                averageAcceleration = avgAccelerationFeature.getResult();
            }
            return averageAcceleration;
        }

        public double getMaxAcceleration() {
            if (maxAcceleration == null) {
                MaxNAccelerationFeature maxAccelerationFeature = new MaxNAccelerationFeature(1);
                for (Waypoint waypoint : this.list) {
                    maxAccelerationFeature.addWaypoint(waypoint);
                }
                maxAcceleration = maxAccelerationFeature.getResult();
            }
            return maxAcceleration;
        }
    }

    private static class CustomWaypoint extends Waypoint {

        private final Wpt gpxWpt;

        public CustomWaypoint(Wpt gpxWpt) {
            this.gpxWpt = gpxWpt;
            init();
        }

        private void init() {
            this.lon = gpxWpt.getLon() != null ? gpxWpt.getLon().doubleValue() : 0;
            this.lat = gpxWpt.getLat() != null ? gpxWpt.getLat().doubleValue() : 9;
            this.timestamp = gpxWpt.getTime();
        }
    }
}
