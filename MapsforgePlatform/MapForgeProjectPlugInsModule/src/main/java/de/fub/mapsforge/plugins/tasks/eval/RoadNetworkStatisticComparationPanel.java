/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.mapsforge.plugins.tasks.eval;

import de.fub.mapforgeproject.api.statistics.StatisticProvider;
import de.fub.mapsforge.project.aggregator.pipeline.processes.RoadNetworkProcess;
import de.fub.mapsforge.project.models.Aggregator;
import java.awt.BorderLayout;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;
import javax.swing.JLabel;
import org.netbeans.core.api.multiview.MultiViews;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.propertysheet.PropertySheetView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.PropertySupport.ReadOnly;
import org.openide.nodes.Sheet;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 *
 * @author Serdar
 */
public final class RoadNetworkStatisticComparationPanel extends javax.swing.JPanel implements ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;
    private static final String MIME_TYPE = "application/map";
    private TopComponent mapView;
    private final ExplorerManager explorerManager = new ExplorerManager();

    /**
     * Creates new form RoadNetworkStatisticComparationPanel
     */
    public RoadNetworkStatisticComparationPanel() {
        initComponents();
        getPropertySheetView().setDescriptionAreaVisible(false);
    }

    public RoadNetworkStatisticComparationPanel(AggregatorRoadNetworkStatisticPair pair) {
        this();
        Aggregator aggregator = pair.getAggregator();
        if (aggregator != null) {
            getTitleLabel().setText(aggregator.getDataObject().getNodeDelegate().getDisplayName());
            ProviderImpl providerImpl = new ProviderImpl(aggregator);
            mapView = MultiViews.createMultiView(MIME_TYPE, providerImpl);
            if (mapView != null) {
                mapContainer.add(mapView, BorderLayout.CENTER);
            }
        }

    }

    public TopComponent getMapView() {
        return mapView;
    }

    public PropertySheetView getPropertySheetView() {
        return propertySheetView1;
    }

    public JLabel getTitleLabel() {
        return titleLabel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        mapContainer = new javax.swing.JPanel();
        statisticContainer = new javax.swing.JPanel();
        propertySheetView1 = new org.openide.explorer.propertysheet.PropertySheetView();
        jPanel2 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 216, 178));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel1.setLayout(new java.awt.BorderLayout(8, 0));

        mapContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mapContainer.setMinimumSize(new java.awt.Dimension(300, 300));
        mapContainer.setOpaque(false);
        mapContainer.setLayout(new java.awt.BorderLayout());
        jPanel1.add(mapContainer, java.awt.BorderLayout.WEST);

        statisticContainer.setOpaque(false);
        statisticContainer.setLayout(new java.awt.BorderLayout());
        statisticContainer.add(propertySheetView1, java.awt.BorderLayout.CENTER);

        jPanel1.add(statisticContainer, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 177, 101)));
        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 24));
        jPanel2.setMinimumSize(new java.awt.Dimension(100, 24));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 24));
        jPanel2.setLayout(new java.awt.BorderLayout());

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(RoadNetworkStatisticComparationPanel.class, "RoadNetworkStatisticComparationPanel.titleLabel.text")); // NOI18N
        titleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(246, 197, 151)));
        jPanel2.add(titleLabel, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mapContainer;
    private org.openide.explorer.propertysheet.PropertySheetView propertySheetView1;
    private javax.swing.JPanel statisticContainer;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private static class ProviderImpl implements Lookup.Provider, Serializable {

        private static final long serialVersionUID = 1L;
        private final Lookup lookup;

        private ProviderImpl(Aggregator aggregator) {
            lookup = Lookups.fixed(aggregator, aggregator.getDataObject());
        }

        @Override
        public Lookup getLookup() {
            return lookup;
        }
    }

    private static class StatisticNode extends AbstractNode {

        private final AggregatorRoadNetworkStatisticPair pair;
        private static final String TOTAL_ROAD_LENGTH_ITEM = "total road length";
        private static final String AVG_ROAD_LENGTH_ITEM = "average road length";
        private static final String ROAD_COUNT_ITEM = "total number of roads";
        private static final String INTERSECTION_COUNT_ITEM = "number of real intersections";
        private static final String PSEUDO_INTERSECTION_COUNT_ITEM = "number of pseudo intersections";

        public StatisticNode(AggregatorRoadNetworkStatisticPair pair) {
            super(Children.LEAF);
            this.pair = pair;
        }

        @Override
        protected Sheet createSheet() {
            Sheet sheet = Sheet.createDefault();
            Sheet.Set set = Sheet.createPropertiesSet();
            sheet.put(set);
            if (pair != null) {
                List<String> itemList = Arrays.asList(TOTAL_ROAD_LENGTH_ITEM, AVG_ROAD_LENGTH_ITEM,
                        ROAD_COUNT_ITEM, ROAD_COUNT_ITEM,
                        INTERSECTION_COUNT_ITEM, PSEUDO_INTERSECTION_COUNT_ITEM);

                for (String itemName : itemList) {
                    Property<?> property = createProperty(itemName);
                    if (property != null) {
                        set.put(property);
                    }
                }
            }
            return sheet;
        }

        private Property<?> createProperty(String statisticItemName) {
            Property<?> property = null;
            if (statisticItemName != null) {
                try {
                    RoadNetworkProcess roadNetwork = pair.getRoadNetworkProcess();
                    for (StatisticProvider.StatisticSection section : roadNetwork.getStatisticData()) {
                        if ("Road Network Statistics".equals(section.getName())) {
                            List<StatisticProvider.StatisticItem> statisticsItemList = section.getStatisticsItemList();
                            for (StatisticProvider.StatisticItem item : statisticsItemList) {
                                if (statisticItemName.equals(item.getName())) {
                                    property = new StatisticProperty(item);
                                }
                            }
                            break;
                        }
                    }
                } catch (StatisticProvider.StatisticNotAvailableException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            return property;
        }
    }

    private static class StatisticProperty extends ReadOnly<String> {

        private final StatisticProvider.StatisticItem item;
        private static final String PROP_NAME_SUPPORTS_CUSTOM_EDITOR = "supportsCustomEditor";

        public StatisticProperty(StatisticProvider.StatisticItem item) {
            super(item.getName(), String.class, item.getName(), item.getDescription());
            this.item = item;
            setValue(PROP_NAME_SUPPORTS_CUSTOM_EDITOR, Boolean.FALSE);
        }

        @Override
        public String getValue() throws IllegalAccessException, InvocationTargetException {
            return item.getValue();
        }
    }
}
