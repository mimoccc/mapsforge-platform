/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.mapsforgeplatform.openstreetmap.ui;

import de.fub.mapsforgeplatform.openstreetmap.ui.controller.GPSPointsFetcherController;
import java.io.File;
import java.text.MessageFormat;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

@NbBundle.Messages({"TITLE_Cache_Directory=Cache Directory"})
final class CachePanel extends javax.swing.JPanel {

    private final static String DEFAULT_DIRECTORY = "default.directory";
    private static final long serialVersionUID = 1L;
    private transient final CacheOptionsPanelController controller;
    private final Preferences preferences;

    CachePanel(CacheOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        preferences = NbPreferences.forModule(this.getClass());
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextPane1 = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        browseButton = new javax.swing.JButton();
        cacheDirTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextPane1.setText(org.openide.util.NbBundle.getMessage(CachePanel.class, "CachePanel.jTextPane1.text")); // NOI18N
        jTextPane1.setOpaque(false);

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(CachePanel.class, "CachePanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        cacheDirTextField.setEditable(false);
        cacheDirTextField.setText(org.openide.util.NbBundle.getMessage(CachePanel.class, "CachePanel.cacheDirTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CachePanel.class, "CachePanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cacheDirTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(browseButton)
                            .addComponent(cacheDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        FileChooserBuilder chooserBuilder = new FileChooserBuilder(this.getClass()).setTitle(Bundle.TITLE_Cache_Directory());
        chooserBuilder.setDirectoriesOnly(true).setFileHiding(true);
        JFileChooser fileChooser = chooserBuilder.createFileChooser();

        int showOpenDialog = fileChooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == showOpenDialog) {
            File selectedFile = fileChooser.getSelectedFile();
            cacheDirTextField.setText(MessageFormat.format("{0}{1}", selectedFile.getAbsolutePath(), GPSPointsFetcherController.CACHE_FOLDER_NAME));
            controller.changed();
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    void load() {
        String cacheDir = preferences.get(GPSPointsFetcherController.CACHE_FOLDER, System.getProperty("java.io.tmpdir", DEFAULT_DIRECTORY));
        if (DEFAULT_DIRECTORY.equals(cacheDir)) {
            cacheDir = System.getProperty("user.home");
        }
        cacheDirTextField.setText(MessageFormat.format("{0}{1}", cacheDir, GPSPointsFetcherController.CACHE_FOLDER_NAME));
    }

    void store() {
        preferences.put(GPSPointsFetcherController.CACHE_FOLDER, cacheDirTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField cacheDirTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
