/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.mapsforge.project.detector.model.inference.ui;

import de.fub.mapsforge.project.detector.model.Detector;
import de.fub.mapsforge.project.detector.model.gpx.TrackSegment;
import de.fub.mapsforge.project.detector.model.inference.AbstractInferenceModel;
import de.fub.mapsforge.project.detector.model.inference.features.FeatureProcess;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Logger;
import org.jfree.data.category.DefaultCategoryDataset;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.PropertySupport;
import org.openide.nodes.Sheet;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;
import org.openide.util.Task;
import org.openide.util.TaskListener;
import org.openide.util.WeakListeners;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.GreedyStepwise;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

/**
 *
 * @author Serdar
 */
public class AttributeSelectionComponent extends javax.swing.JPanel implements TaskListener, ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;
    private final ExplorerManager explorerManager = new ExplorerManager();
    private Detector detector;
    private AttributeSelectionTask attributeSelectionTask;
    private ProgressHandle handle;

    /**
     * Creates new form AttributeSelectionComponent
     */
    public AttributeSelectionComponent() {
        initComponents();
        outlineView1.getOutline().setRootVisible(false);
    }

    public AttributeSelectionComponent(Detector detector) {
        this();
        this.detector = detector;
        this.attributeSelectionTask = new AttributeSelectionTask(detector);
        handle = ProgressHandleFactory.createHandle("Evaluating...");
        statusBar.add(ProgressHandleFactory.createProgressComponent(handle), BorderLayout.CENTER);
        handle.start();
        RequestProcessor.Task task = RequestProcessor.getDefault().create(this.attributeSelectionTask);
        task.addTaskListener(WeakListeners.create(TaskListener.class, AttributeSelectionComponent.this, task));
        task.schedule(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        statusBar = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        attributeSelectionBarChart1 = new de.fub.mapsforge.project.detector.model.inference.ui.charts.AttributeSelectionBarChart();
        jPanel5 = new javax.swing.JPanel();
        outlineView1 = new org.openide.explorer.view.OutlineView();

        setPreferredSize(new java.awt.Dimension(550, 500));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        statusBar.setMaximumSize(new java.awt.Dimension(32767, 16));
        statusBar.setMinimumSize(new java.awt.Dimension(100, 16));
        statusBar.setPreferredSize(new java.awt.Dimension(836, 16));
        statusBar.setLayout(new java.awt.BorderLayout());
        jPanel2.add(statusBar, java.awt.BorderLayout.SOUTH);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        attributeSelectionBarChart1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel4.add(attributeSelectionBarChart1);

        jPanel5.setLayout(new java.awt.BorderLayout());

        outlineView1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        outlineView1.setPropertyColumns(new String[] {"index", "Index", "merit", "Merit (%)"});
        jPanel5.add(outlineView1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.fub.mapsforge.project.detector.model.inference.ui.charts.AttributeSelectionBarChart attributeSelectionBarChart1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private org.openide.explorer.view.OutlineView outlineView1;
    private javax.swing.JPanel statusBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void taskFinished(Task task) {
        handle.finish();
        List<RankedAttribute> rankedAttributeList = attributeSelectionTask.getRankedAttributeList();
        Collections.sort(rankedAttributeList);

        getExplorerManager().setRootContext(new RootNode(rankedAttributeList));
        DefaultCategoryDataset dataset = attributeSelectionBarChart1.getDataset();
        attributeSelectionBarChart1.getBarChart().removeLegend();

        for (RankedAttribute attribute : rankedAttributeList) {
            dataset.addValue(attribute.getMerit(), attribute.getName(), "Attribute");
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private static class RootNode extends AbstractNode {

        private RootNode(List<RankedAttribute> rankedAttributeList) {
            super(Children.create(new NodeFactory(rankedAttributeList), true));
        }
    }

    private static class NodeFactory extends ChildFactory<RankedAttribute> {

        private final List<RankedAttribute> rankedAttributeList;

        private NodeFactory(List<RankedAttribute> rankedAttributeList) {
            this.rankedAttributeList = rankedAttributeList;
        }

        @Override
        protected boolean createKeys(List<RankedAttribute> toPopulate) {
            toPopulate.addAll(rankedAttributeList);
            return true;
        }

        @Override
        protected Node createNodeForKey(RankedAttribute attribute) {
            Node node = Node.EMPTY;
            try {
                node = new AttributeNode(attribute);
            } catch (IntrospectionException ex) {
                Exceptions.printStackTrace(ex);
            }

            return node;
        }
    }

    private static class AttributeNode extends BeanNode<RankedAttribute> {

        public AttributeNode(RankedAttribute attribute) throws IntrospectionException {
            super(attribute, Children.LEAF);
            setDisplayName(attribute.getName());
        }

        @Override
        protected Sheet createSheet() {
            Sheet sheet = Sheet.createDefault();
            Sheet.Set set = Sheet.createPropertiesSet();
            sheet.put(set);
            final RankedAttribute bean = getBean();

            Property<?> property = new PropertySupport.ReadOnly<Integer>("index", Integer.class, "Index", "Ranke of this attribute") {
                @Override
                public Integer getValue() throws IllegalAccessException, InvocationTargetException {
                    return bean.getIndex();
                }
            };

            set.put(property);

            property = new PropertySupport.ReadOnly<Double>("merit", Double.class, "Merit (%)", "The merit value of this attribute") {
                @Override
                public Double getValue() throws IllegalAccessException, InvocationTargetException {
                    return bean.getMerit();
                }
            };
            set.put(property);
            return sheet;
        }
    }

    private static class AttributeSelectionTask implements Runnable {

        private static final Logger LOG = Logger.getLogger(AttributeSelectionTask.class.getName());
        private final Detector detector;
        private List<RankedAttribute> rankedAttributeList = new ArrayList<RankedAttribute>();

        private AttributeSelectionTask(Detector detector) {
            this.detector = detector;
        }

        private AbstractInferenceModel getInferenceModel() {
            return detector.getInferenceModel();
        }

        public List<RankedAttribute> getRankedAttributeList() {
            return rankedAttributeList;
        }

        @Override
        public void run() {
            Instances trainingSet = createTrainingsSet();
            evaluate(trainingSet);
        }

        private Instances createTrainingsSet() {

            ArrayList<Attribute> attributeList = getInferenceModel().getAttributeList();
            Instances trainingSet = new Instances("Classes", attributeList, 9);
            trainingSet.setClassIndex(0);
            Map<String, List<TrackSegment>> dataset = detector.getTrainingsSet();

            for (Map.Entry<String, List<TrackSegment>> entry : dataset.entrySet()) {
                for (TrackSegment trackSegment : entry.getValue()) {
                    Instance instance = getInstance(entry.getKey(), trackSegment);
                    trainingSet.add(instance);
                }
            }

            assert trainingSet.numInstances() > 0 : "Training set is empty and has no instances"; //NO18N
            return trainingSet;
        }

        private void evaluate(Instances trainingSet) {
            try {
                AttributeSelectedClassifier classifier = new AttributeSelectedClassifier();
                Classifier base = getInferenceModel().getClassifier().getClass().newInstance();
                classifier.setClassifier(base);
                CfsSubsetEval eval = new CfsSubsetEval();
                classifier.setEvaluator(eval);
                GreedyStepwise search = new GreedyStepwise();
                classifier.setSearch(search);

//                search.setSearchBackwards(true);
//                search.setGenerateRanking(true);

                // 10-fold cross-validation
                Evaluation evaluation = new Evaluation(trainingSet);
                evaluation.crossValidateModel(classifier, trainingSet, 10, new Random(1));

                int[] attributeSelection = search.search(eval, trainingSet);

                LOG.info(Arrays.toString(attributeSelection));

                double[][] rankedAttributes = search.rankedAttributes();

                for (int i = 0; i < rankedAttributes.length; i++) {
                    RankedAttribute rankedAttribute = new RankedAttribute();
                    rankedAttributeList.add(rankedAttribute);
                    for (int j = 0; j < rankedAttributes[i].length; j++) {
                        switch (j) {
                            case 0:
                                int rank = (int) rankedAttributes[i][j];
                                rankedAttribute.setIndex(rank);
                                if (rank < getInferenceModel().getAttributeList().size()) {
                                    rankedAttribute.setName(getInferenceModel().getAttributeList().get(i).toString());
                                }
                                break;
                            case 1:
                                rankedAttribute.setMerit(rankedAttributes[i][j]);
                                break;
                            default:
                                throw new AssertionError();
                        }
                    }
                }



                LOG.info(evaluation.toSummaryString());
            } catch (InstantiationException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IllegalAccessException ex) {
                Exceptions.printStackTrace(ex);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        private Instance getInstance(String className, TrackSegment dataset) {
            Instance instance = new DenseInstance(getInferenceModel().getAttributeList().size());

            for (FeatureProcess feature : getInferenceModel().getFeatureList()) {
                feature.setInput(dataset);
                feature.run();
                String featureName = feature.getName();
                Attribute attribute = getInferenceModel().getAttributeMap().get(featureName);
                Double result = feature.getResult();
                instance.setValue(attribute, result);
            }

            instance.setValue(getInferenceModel().getAttributeMap().get(AbstractInferenceModel.CLASSES_ATTRIBUTE_NAME), className);
            return instance;
        }
    }

    private static class RankedAttribute implements Comparable<RankedAttribute> {

        private String name;
        private int index;
        private double merit;

        public RankedAttribute() {
        }

        public RankedAttribute(String name, int index, double merit) {
            this.name = name;
            this.index = index;
            this.merit = merit;
        }

        public String getName() {
            return name;
        }

        public int getIndex() {
            return index;
        }

        public double getMerit() {
            return merit;
        }

        private void setName(String name) {
            this.name = name;
        }

        private void setIndex(int index) {
            this.index = index;
        }

        private void setMerit(double merit) {
            this.merit = merit;
        }

        @Override
        public int compareTo(RankedAttribute o) {
            return index == o.index ? 0 : index < o.index ? -1 : 1;
        }
    }
}
