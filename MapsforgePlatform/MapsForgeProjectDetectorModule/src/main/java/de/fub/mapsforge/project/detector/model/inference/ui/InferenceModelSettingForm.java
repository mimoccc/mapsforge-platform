/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.mapsforge.project.detector.model.inference.ui;

import de.fub.mapsforge.project.detector.factories.FeatureNodeFactory;
import de.fub.mapsforge.project.detector.model.inference.AbstractInferenceModel;
import de.fub.mapsforge.project.detector.model.inference.features.FeatureProcess;
import de.fub.mapsforge.project.detector.ui.SelectionComponent;
import de.fub.utilsmodule.Collections.ObservableArrayList;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.WeakListeners;

/**
 *
 * @author Serdar
 */
public class InferenceModelSettingForm extends javax.swing.JPanel implements PropertyChangeListener {

    private static final long serialVersionUID = 1L;
    private final AbstractInferenceModel inferenecModel;
    private final ObservableArrayList<FeatureProcess> allFeatureList;
    private final ObservableArrayList<FeatureProcess> selectedFeatureList;

    /**
     * Creates new form InferenceModelSettingForm
     */
    public InferenceModelSettingForm() {
        this(null);
    }

    public InferenceModelSettingForm(AbstractInferenceModel inferenceModel) {
        assert inferenceModel != null;
        initComponents();

        selectionComponent1.getAllListExplorerManager().addPropertyChangeListener(WeakListeners.propertyChange(InferenceModelSettingForm.this, selectionComponent1.getAllListExplorerManager()));
        selectionComponent1.getSelectedListExplorerManager().addPropertyChangeListener(WeakListeners.propertyChange(InferenceModelSettingForm.this, selectionComponent1.getSelectedListExplorerManager()));
        this.inferenecModel = inferenceModel;

        selectionComponent1.getAllItemListTitle().setText("All Features"); //NO18N
        selectionComponent1.getSelectedItemListTitle().setText("Selected Features"); // NO18N

        allFeatureList = new ObservableArrayList<FeatureProcess>(Lookup.getDefault().lookupResult(FeatureProcess.class).allInstances());
        selectedFeatureList = new ObservableArrayList<FeatureProcess>();
        Collection<FeatureProcess> featureList = inferenceModel.getFeatureList();

        for (FeatureProcess feature : featureList) {
            for (FeatureProcess f : allFeatureList) {
                if (feature.getClass().equals(f.getClass())) {
                    selectedFeatureList.add(f);
                }
            }
        }
        allFeatureList.removeAll(selectedFeatureList);

        selectionComponent1.getAllListExplorerManager().setRootContext(new AbstractNode(Children.create(new FeatureNodeFactory(allFeatureList), true)));
        selectionComponent1.getSelectedListExplorerManager().setRootContext(new AbstractNode(Children.create(new FeatureNodeFactory(selectedFeatureList), true)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionComponent1 = new de.fub.mapsforge.project.detector.ui.SelectionComponent();

        setLayout(new java.awt.BorderLayout());

        selectionComponent1.setPreferredSize(new java.awt.Dimension(400, 450));
        add(selectionComponent1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.fub.mapsforge.project.detector.ui.SelectionComponent selectionComponent1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
            Node[] allSelectedNodes = selectionComponent1.getAllListExplorerManager().getSelectedNodes();
            Node[] selectedNodes = selectionComponent1.getSelectedListExplorerManager().getSelectedNodes();

            if (allSelectedNodes.length == 0 && selectedNodes.length == 0) {
                selectionComponent1.getDescription().setText(null);
            } else if (allSelectedNodes.length > 0 || selectedNodes.length > 0) {

                if (allSelectedNodes.length == 1) {
                    FeatureProcess feature = allSelectedNodes[0].getLookup().lookup(FeatureProcess.class);
                    if (feature != null) {
                        selectionComponent1.getDescription().setText(feature.getDescription());
                    }
                } else if (selectedNodes.length == 1) {
                    FeatureProcess feature = selectedNodes[0].getLookup().lookup(FeatureProcess.class);
                    if (feature != null) {
                        selectionComponent1.getDescription().setText(feature.getDescription());
                    }
                } else {
                    Node[] nodes = null;
                    if (selectionComponent1.getAllItemList().isFocusOwner()) {
                        nodes = allSelectedNodes;
                    } else if (selectionComponent1.getSelectedItemList().isFocusOwner()) {
                        nodes = selectedNodes;
                    }
                    if (nodes != null) {
                        StringBuilder stringBuilder = new StringBuilder();
                        for (Node node : nodes) {
                            FeatureProcess feature = node.getLookup().lookup(FeatureProcess.class);
                            if (feature != null) {
                                stringBuilder.append(feature.toString()).append("\n");
                            }
                        }
                        selectionComponent1.getDescription().setText(stringBuilder.toString());
                    }
                }
            }
        }
    }
}
