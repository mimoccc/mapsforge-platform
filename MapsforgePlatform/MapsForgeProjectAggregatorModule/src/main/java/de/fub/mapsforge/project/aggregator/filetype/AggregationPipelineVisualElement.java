/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fub.mapsforge.project.aggregator.filetype;

import de.fub.mapsforge.project.aggregator.factories.nodes.AggregatorNode;
import de.fub.mapsforge.project.aggregator.pipeline.AbstractAggregationProcess;
import de.fub.mapsforge.project.models.Aggregator;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.palette.DragAndDropHandler;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.WeakListeners;
import org.openide.util.datatransfer.ExTransferable;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_AggregationBuilder_PIPELINE",
        iconBase = "de/fub/mapsforge/project/aggregator/filetype/aggregationBuilderIcon.png",
        mimeType = "text/aggregationbuilder+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "AggregationPipelineVisual",
        position = 2000)
@Messages("LBL_AggregationBuilder_PIPELINE=Pipeline")
public final class AggregationPipelineVisualElement extends JPanel implements MultiViewElement, PropertyChangeListener, ChangeListener {

    private static final long serialVersionUID = 1L;
    private Aggregator aggregator;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private Lookup lookup = null;

    public AggregationPipelineVisualElement(Lookup lkp) {
        AggregatorNode node = lkp.lookup(AggregatorNode.class);
        if (node != null) {
            lkp = node.getLookup();
            aggregator = node.getLookup().lookup(Aggregator.class);
        }
        assert aggregator != null;
        lookup = new ProxyLookup(aggregator.getDataObject().getLookup(),
                Lookups.singleton(PaletteFactory.createPalette(
                new AbstractNode(Children.create(new CategoryNodeFactory(), true)),
                new EmptyPaletteAction(), null, new PaletteDragAndDropHandler())));
        aggregator.addPropertyChangeListener(WeakListeners.propertyChange(AggregationPipelineVisualElement.this, aggregator));
        initComponents();
        graphPanel1.removeChangeListener(AggregationPipelineVisualElement.this);
        graphPanel1.setAggregator(aggregator);
        graphPanel1.addChangeListener(AggregationPipelineVisualElement.this);
        for (Action action : getActions()) {
            toolbar.add(new JButton(action));
        }
    }

    @Override
    public String getName() {
        return "AggregationBuilderVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphPanel1 = new de.fub.mapsforge.project.aggregator.graph.GraphPanel();

        setLayout(new java.awt.BorderLayout());
        add(graphPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.fub.mapsforge.project.aggregator.graph.GraphPanel graphPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[]{new AbstractAction("Layout") {
                private static final long serialVersionUID = 1L;

                @Override
                public void actionPerformed(ActionEvent e) {
                    graphPanel1.layoutGraph();
                }
            }};
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Aggregator.PROP_NAME_AGGREGATOR_STATE.equals(evt.getPropertyName()) && callback != null) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    TopComponent topComponent = callback.getTopComponent();
                    topComponent.setIcon(aggregator.getAggregatorState().getImage());
                }
            });
        } else if (Aggregator.PROP_NAME_DATAOBJECT.equals(evt.getPropertyName())) {
            if (aggregator != null) {
                graphPanel1.removeChangeListener(AggregationPipelineVisualElement.this);
                graphPanel1.setAggregator(aggregator);
                graphPanel1.addChangeListener(AggregationPipelineVisualElement.this);
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static class PaletteDragAndDropHandler extends DragAndDropHandler {

        private static final Logger LOG = Logger.getLogger(PaletteDragAndDropHandler.class.getName());

        public PaletteDragAndDropHandler() {
        }

        @Override
        public void customize(ExTransferable et, Lookup lkp) {
            final AbstractAggregationProcess process = lkp.lookup(AbstractAggregationProcess.class);
            if (process != null) {
                et.put(new ExTransferable.Single(AbstractAggregationProcess.PROCESS_FLAVOR) {
                    @Override
                    protected Object getData() throws IOException, UnsupportedFlavorException {
                        return process;
                    }
                });
            }

            LOG.log(Level.FINE, "drag and drop handler: cusomize");
        }
    }

    private static class EmptyPaletteAction extends PaletteActions {

        @Override
        public Action[] getImportActions() {
            return null;
        }

        @Override
        public Action[] getCustomPaletteActions() {
            return null;
        }

        @Override
        public Action[] getCustomCategoryActions(Lookup lkp) {
            return null;
        }

        @Override
        public Action[] getCustomItemActions(Lookup lkp) {
            return null;
        }

        @Override
        public Action getPreferredAction(Lookup lkp) {
            return null;
        }
    }
}
